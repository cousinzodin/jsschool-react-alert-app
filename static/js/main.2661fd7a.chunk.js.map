{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Alert","props","react_default","a","createElement","className","message","AlertList","_this3","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","container","document","body","insertBefore","firstChild","removeChild","time","_this4","AlertWithPortal","element","arguments","length","undefined","WrappedComponent","_React$Component","_class","apply","inherits","createClass","key","value","ReactDOM","createPortal","React","Component","WithPortal","AlertWithTimer","_React$Component2","_class2","_this","timer","_this2","setTimeout","onTimer","clearTimeout","onTimeUp","alerts","map","alert","index","onDelete","AlertWrapper","_this5","input","createRef","state","e","preventDefault","concat","toConsumableArray","setState","current","focus","filter","i","target","_this6","App_AlertList","removeAlert","onSubmit","createAlert","ref","onChange","handleChange","type","disabled","App","App_AlertWrapper","href","Boolean","window","location","hostname","match","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2661fd7a.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\n\nconst WithPortal = (element = document.body) => WrappedComponent => {\n  return class extends React.Component {\n    render() {\n      return ReactDOM.createPortal(\n        <WrappedComponent {...this.props} />,\n        element\n      );\n    }\n  };\n};\n\nconst WithTimer = time => WrappedComponent => {\n  return class extends React.Component {\n    constructor() {\n      super();\n      this.timer = null;\n    }\n    componentDidMount() {\n      this.timer = setTimeout(() => this.onTimer(), time);\n    }\n\n    componentWillUnmount() {\n      clearTimeout(this.timer);\n    }\n\n    onTimer() {\n      if (this.props.onTimeUp) {\n        this.props.onTimeUp();\n      }\n    }\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n};\n\nconst Alert = props => <div className=\"alert\">{props.message}</div>;\n\nclass AlertList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.container = document.createElement(\"div\");\n    this.container.className = \"alert-wrapper\";\n  }\n  componentDidMount() {\n    document.body.insertBefore(this.container, document.body.firstChild);\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.container);\n  }\n  render() {\n    const AlertWithPortal = WithPortal(this.container)(Alert);\n    const AlertWithTimer = WithTimer(2000)(AlertWithPortal);\n\n    return this.props.alerts.map((alert, index) => (\n      <AlertWithTimer\n        onTimeUp={() => this.props.onDelete(alert)}\n        key={index}\n        message={alert}\n      />\n    ));\n  }\n}\n\nclass AlertWrapper extends React.Component {\n  constructor() {\n    super();\n    this.input = React.createRef();\n    this.state = { message: \"\", alerts: [] };\n  }\n\n  createAlert(e) {\n    e.preventDefault();\n    const alerts = [...this.state.alerts, this.state.message];\n    this.setState({ message: \"\", alerts: alerts });\n    this.input.current.focus();\n  }\n\n  removeAlert(value) {\n    const alerts = this.state.alerts.filter(i => i !== value);\n    this.setState({ alerts: alerts });\n  }\n\n  componentDidMount() {\n    this.input.current.focus();\n  }\n  handleChange(e) {\n    this.setState({ message: e.target.value });\n  }\n  render() {\n    return (\n      <div className=\"form\">\n        <h1>Alert App</h1>\n        <AlertList\n          alerts={this.state.alerts}\n          onDelete={e => this.removeAlert(e)}\n        />\n        <form onSubmit={e => this.createAlert(e)}>\n          <input\n            value={this.state.message}\n            ref={this.input}\n            onChange={e => this.handleChange(e)}\n            type=\"text\"\n          />\n          <button type=\"submit\" disabled={!this.state.message}>\n            Add alert\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlertWrapper />\n      <p>\n        <a href=\"https://github.com/cousinzodin//jsschool-react-alert-app\">\n          View on Github\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}