{"version":3,"sources":["components/Alert.js","components/AlertList.js","hocs/WithTimer.js","hocs/WithPortal.js","components/AlertWrapper.js","App.js","serviceWorker.js","index.js"],"names":["Alert","props","react_default","a","createElement","className","message","AlertList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","container","document","querySelector","body","insertBefore","firstChild","removeChild","time","_this2","AlertWithPortal","element","arguments","length","undefined","WrappedComponent","_React$Component","_class","apply","inherits","createClass","key","value","ReactDOM","createPortal","React","Component","WithPortal","AlertWithTimer","timer","setTimeout","onTimer","clearTimeout","onTimeUp","alerts","map","alert","index","onDelete","AlertWrapper","input","createRef","state","e","preventDefault","concat","toConsumableArray","setState","current","focus","filter","i","target","AlertList_AlertList","alertMessage","removeAlert","onSubmit","createAlert","ref","onChange","handleChange","type","disabled","App","AlertWrapper_AlertWrapper","href","Boolean","window","location","hostname","match","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8543ad24.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default props => <div className=\"alert\">{props.message}</div>;\r\n","import React from \"react\";\r\nimport WithPortal from \"../hocs/WithPortal\";\r\nimport WithTimer from \"../hocs/WithTimer\";\r\nimport Alert from \"./Alert\";\r\n\r\nexport default class AlertList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.container = document.querySelector('.alert-wrapper')\r\n  }\r\n  componentDidMount() {\r\n    document.body.insertBefore(this.container, document.body.firstChild);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.container);\r\n  }\r\n  render() {\r\n    const AlertWithPortal = WithPortal(this.container)(Alert);\r\n    const AlertWithTimer = WithTimer(2000)(AlertWithPortal);\r\n\r\n    return this.props.alerts.map((alert, index) => (\r\n      <AlertWithTimer\r\n        onTimeUp={() => this.props.onDelete(alert)}\r\n        key={index}\r\n        message={alert}\r\n      />\r\n    ));\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default time => WrappedComponent => {\r\n  return class extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.timer = null;\r\n    }\r\n    componentDidMount() {\r\n      this.timer = setTimeout(() => this.onTimer(), time);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      clearTimeout(this.timer);\r\n    }\r\n\r\n    onTimer() {\r\n      if (this.props.onTimeUp) {\r\n        this.props.onTimeUp();\r\n      }\r\n    }\r\n    render() {\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nexport default (element = document.body) => WrappedComponent => {\r\n  return class extends React.Component {\r\n    render() {\r\n      return ReactDOM.createPortal(\r\n        <WrappedComponent {...this.props} />,\r\n        element\r\n      );\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport AlertList from \"./AlertList\";\r\n\r\nexport default class AlertWrapper extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.input = React.createRef();\r\n    this.state = { message: \"\", alerts: [] };\r\n  }\r\n\r\n  createAlert(e) {\r\n    e.preventDefault();\r\n    const alerts = [...this.state.alerts, this.state.message];\r\n    this.setState({ message: \"\", alerts: alerts });\r\n    this.input.current.focus();\r\n  }\r\n\r\n  removeAlert(value) {\r\n    const alerts = this.state.alerts.filter(i => i !== value);\r\n    this.setState({ alerts: alerts });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.input.current.focus();\r\n  }\r\n  handleChange(e) {\r\n    this.setState({ message: e.target.value });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"form\">\r\n        <h1>Alert App</h1>\r\n        <AlertList\r\n          alerts={this.state.alerts}\r\n          onDelete={alertMessage => this.removeAlert(alertMessage)}\r\n        />\r\n        <form onSubmit={e => this.createAlert(e)}>\r\n          <input\r\n            value={this.state.message}\r\n            ref={this.input}\r\n            onChange={e => this.handleChange(e)}\r\n            type=\"text\"\r\n          />\r\n          <button type=\"submit\" disabled={!this.state.message}>\r\n            Add alert\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport AlertWrapper from \"./components/AlertWrapper\";\r\nimport \"./App.css\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AlertWrapper />\r\n      <p>\r\n        <a href=\"https://github.com/cousinzodin//jsschool-react-alert-app\">\r\n          View on Github\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}