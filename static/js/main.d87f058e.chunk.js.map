{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Alert","props","react_default","a","createElement","className","message","AlertWrapper","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","container","document","body","insertBefore","firstChild","removeChild","AlertWithPortal","element","arguments","length","undefined","WrappedComponent","_React$Component","_class","apply","inherits","createClass","key","value","ReactDOM","createPortal","React","Component","WithPortal","alerts","map","alert","index","AlertController","_this2","input","createRef","state","e","preventDefault","concat","toConsumableArray","setState","current","focus","target","_this3","App_AlertWrapper","onSubmit","createAlert","ref","onChange","handleChange","type","disabled","App","App_AlertController","Boolean","window","location","hostname","match","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d87f058e.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\n\nconst WithPortal = (element = document.body) => WrappedComponent => {\n  return class extends React.Component {\n    render() {\n      return ReactDOM.createPortal(\n        <WrappedComponent {...this.props} />,\n        element\n      );\n    }\n  };\n};\n\n// const WithTimer = WrappedComponent => {\n//   return class extends React.Component {\n//     constructor() {\n//       super();\n//       this.state = { renderChild: true };\n//     }\n//     componentDidMount() {\n//       setTimeout(() => this.setState({ renderChild: false }), 1000);\n//     }\n//     render() {\n//       return this.state.renderChild ? (\n//         <WrappedComponent {...this.props} />\n//       ) : null;\n//     }\n//   };\n// };\n\nconst Alert = props => <div className=\"alert\">{props.message}</div>;\n\nclass AlertWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.container = document.createElement(\"div\");\n    this.container.className = \"alert-wrapper\";\n  }\n  componentDidMount() {\n    document.body.insertBefore(this.container, document.body.firstChild);\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.container);\n  }\n  render() {\n    const AlertWithPortal = WithPortal(this.container)(Alert);\n    //const TimedAlert = WithTimer(MyAlert);\n\n    return this.props.alerts.map((alert, index) => (\n      <AlertWithPortal key={index} message={alert} />\n    ));\n  }\n}\n\nclass AlertController extends React.Component {\n  constructor() {\n    super();\n    this.input = React.createRef();\n    this.state = { message: \"\", alerts: [] };\n  }\n\n  createAlert(e) {\n    e.preventDefault();\n    const alerts = [...this.state.alerts, this.state.message];\n    this.setState({ message: \"\", alerts: alerts });\n    this.input.current.focus();\n  }\n  componentDidMount() {\n    this.input.current.focus();\n  }\n  handleChange(e) {\n    this.setState({ message: e.target.value });\n  }\n  render() {\n    return (\n      <div className=\"form\">\n        <h1>Alert App</h1>\n        <AlertWrapper alerts={this.state.alerts} />\n        <form onSubmit={e => this.createAlert(e)}>\n          <input\n            value={this.state.message}\n            ref={this.input}\n            onChange={e => this.handleChange(e)}\n            type=\"text\"\n          />\n          <button type=\"submit\" disabled={!this.state.message}>\n            Add alert\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlertController />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}